export enum ErrorCode {
  // Network errors
  UNSUPPORTED_NETWORK = 'UNSUPPORTED_NETWORK',
  WRONG_NETWORK = 'WRONG_NETWORK',
  NETWORK_ERROR = 'NETWORK_ERROR',
  MISSING_RPC_URL = 'MISSING_RPC_URL',

  // Resource errors
  NOT_FOUND = 'NOT_FOUND',
  RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND',

  // Input errors
  INVALID_INPUT = 'INVALID_INPUT',
  MISSING_TOKENS = 'MISSING_TOKENS',
  VALIDATION_FAILED = 'VALIDATION_FAILED',

  // Type errors
  UNSUPPORTED_TYPE = 'UNSUPPORTED_TYPE',

  // Transaction errors
  ESTIMATION_FAILED = 'ESTIMATION_FAILED',
  TRANSACTION_FAILED = 'TRANSACTION_FAILED',
  TRANSACTION_REVERTED = 'TRANSACTION_REVERTED',
  TRANSACTION_REJECTED = 'TRANSACTION_REJECTED',
  TRANSACTION_REPLACED = 'TRANSACTION_REPLACED',
  TRANSACTION_PENDING = 'TRANSACTION_PENDING',
  INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS',
  GAS_ESTIMATION_FAILED = 'GAS_ESTIMATION_FAILED',
  GAS_PRICE_TOO_LOW = 'GAS_PRICE_TOO_LOW',
  NONCE_ERROR = 'NONCE_ERROR',
  CONTRACT_ERROR = 'CONTRACT_ERROR',

  // Hardware wallet errors
  LEDGER_ERROR = 'LEDGER_ERROR',
  HARDWARE_WALLET_ERROR = 'HARDWARE_WALLET_ERROR',

  // Sale status errors
  NOT_ELIGIBLE = 'NOT_ELIGIBLE',
  SOLD_OUT = 'SOLD_OUT',
  LIMIT_REACHED = 'LIMIT_REACHED',
  ENDED = 'ENDED',
  NOT_STARTED = 'NOT_STARTED',

  // API errors
  API_ERROR = 'API_ERROR',
  RATE_LIMITED = 'RATE_LIMITED',
  INVALID_RESPONSE = 'INVALID_RESPONSE',
  TIMEOUT = 'TIMEOUT',

  // Implementation status
  UNSUPPORTED_PRODUCT_TYPE = 'PRODUCT_TYPE_NOT_SUPPORTED',

  // Generic
  UNKNOWN_ERROR = 'UNKNOWN_ERROR',
}

export class ClientSDKError extends Error {
  constructor(
    public code: ErrorCode,
    message: string,
    public details?: unknown,
  ) {
    super(message);
    this.name = 'ClientSDKError';
  }
}
